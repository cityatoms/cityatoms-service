swagger: "2.0"

info:
  version: '1'
  title: cityatoms-service

host: localhost:3000
basePath: /api/v1

schemes:
  - http

consumes:
  - application/json
  
securityDefinitions:
  BackofficeAuthToken:
    type: apiKey
    in: header
    name: x-backoffice-auth-token
  AuthToken:
    type: apiKey
    in: header
    name: x-cityatom-auth-token

security:
  - BackofficeAuthToken: []
  - AuthToken: []

paths:
  /me/users:
    x-swagger-router-controller: me
    get:
      description: Get user
      security:
        - AuthToken: []
      operationId: meGet
      parameters:
        - name: body
          in: body
          schema:
            $ref: "#/definitions/userRequestBody"
        - in: header
          name: x-auth-token
          type: string
          required: true
      responses:
        '200':
          description: OK
          schema:
            $ref: "#/definitions/userResponse"
        '400':
          description: Validation errors
          schema:
            $ref: '#/definitions/validationError'
        '403':
          description: Authentication error
          schema:
            $ref: "#/definitions/error"
    put:
      description: Update user
      security:
        - AuthToken: []
      operationId: mePut
      parameters:
        - in: header
          name: x-auth-token
          type: string
          required: true
        - name: body
          in: body
          schema:
            $ref: "#/definitions/userRequestBody"
      responses:
        '200':
          description: OK
          schema:
            $ref: "#/definitions/userResponse"
        '400':
          description: Validation errors
          schema:
            $ref: '#/definitions/validationError'
        '403':
          description: Authentication error
          schema:
            $ref: "#/definitions/error"
    post:
      description: Create user
      security:
        - AuthToken: []
      operationId: mePostUser
      parameters:
        - name: body
          in: body
          schema:
            $ref: "#/definitions/userRequestBody"
      responses:
        '200':
          description: OK
          schema:
            $ref: "#/definitions/loginToken"
        '400':
          description: Validation errors
          schema:
            $ref: '#/definitions/validationError'
        '403':
          description: Authentication error
          schema:
            $ref: "#/definitions/error"
  /me/login:
    x-swagger-router-controller: me
    post:
      description: Login
      security:
        - AuthToken: []
      operationId: meLogin
      parameters:
        - name: body
          in: body
          schema:
            $ref: "#/definitions/userLogin"
      responses:
        '200':
          description: OK
          schema:
            $ref: "#/definitions/userResponse"
        '400':
          description: Validation errors
          schema:
            $ref: '#/definitions/validationError'
        '403':
          description: Authentication error
          schema:
            $ref: "#/definitions/error"

  /me/datapoints:
    x-swagger-router-controller: me
    get:
      description: get datapoints
      security:
        - AuthToken: []
      operationId: meGetDatapoints
      parameters:
        - in: header
          name: x-auth-token
          type: string
          required: true
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/datapoint"
        '400':
          description: Validation errors
          schema:
            $ref: '#/definitions/validationError'
        '403':
          description: Authentication error
          schema:
            $ref: "#/definitions/error"
    post:
      description: Get datapoints by user
      security:
        - AuthToken: []
      operationId: mePostDatapoint
      parameters:
        - in: header
          name: x-auth-token
          type: string
          required: true
        - name: body
          in: body
          schema:
            $ref: "#/definitions/datapointRequestBody"
      responses:
        '200':
          description: OK
          schema:
            $ref: "#/definitions/userResponse"
        '400':
          description: Validation errors
          schema:
            $ref: '#/definitions/validationError'
        '403':
          description: Authentication error
          schema:
            $ref: "#/definitions/error"

  /backoffice/users:
    x-swagger-router-controller: backoffice
    get:
      description: Create user
      security:
        - BackofficeAuthToken: []
      operationId: backofficeGetUsers
      responses:
        '201':
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/userResponse"
        '400':
          description: Validation errors
          schema:
            $ref: '#/definitions/validationError'
        '403':
          description: Authentication error
          schema:
            $ref: "#/definitions/error"
    post:
      description: Create user
      security:
        - BackofficeAuthToken: []
      operationId: backofficePostUser
      parameters:
        - name: body
          in: body
          schema:
            $ref: "#/definitions/userRequestBody"
      responses:
        '201':
          description: OK
          schema:
            $ref: "#/definitions/userResponse"
        '400':
          description: Validation errors
          schema:
            $ref: '#/definitions/validationError'
        '403':
          description: Authentication error
          schema:
            $ref: "#/definitions/error"
            
  /backoffice/users/{userId}:
    x-swagger-router-controller: backoffice
    get:
      description: Get user
      security:
        - BackofficeAuthToken: []
      operationId: backofficeGetUserById
      parameters:
        - name: userId
          in: path
          description: 'ID of the user'
          required: true
          x-example: 'USERID'
          type: string
          pattern: '^[0-9a-fA-F]{24}$'
      responses:
        '200':
          description: OK
          schema:
            $ref: "#/definitions/userResponse"
        '400':
          description: Validation errors
          schema:
            $ref: '#/definitions/validationError'
        '403':
          description: Authentication error
          schema:
            $ref: "#/definitions/error"
    put:
      description: Update user
      security:
        - BackofficeAuthToken: []
      operationId: backofficePutUser
      parameters:
        - name: body
          in: body
          schema:
            $ref: "#/definitions/userRequestBody"
        - name: userId
          in: path
          description: 'ID of the user'
          required: true
          x-example: 'USERID'
          type: string
          pattern: '^[0-9a-fA-F]{24}$'
      responses:
        '200':
          description: OK
          schema:
            $ref: "#/definitions/userResponse"
        '400':
          description: Validation errors
          schema:
            $ref: '#/definitions/validationError'
        '403':
          description: Authentication error
          schema:
            $ref: "#/definitions/error"

  /backoffice/datapoints:
    x-swagger-router-controller: backoffice
    get:
      description: get datapoints
      security:
        - BackofficeAuthToken: []
      operationId: backofficeGetDatapoints
      parameters:
        - name: lat
          in: query
          type: string
          x-example: '20'
        - name: lon
          in: query
          type: string
          x-example: '20'
        - name: radius
          in: query
          type: string
          x-example: '20'
        - name: time
          in: query
          type: string
          x-example: '2019-05-07T15:37:08.300Z'
        - name: imei
          in: query
          type: string
          x-example: '123123131321'
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/datapoint"
        '400':
          description: Validation errors
          schema:
            $ref: '#/definitions/validationError'
        '403':
          description: Authentication error
          schema:
            $ref: "#/definitions/error"
    post:
      description: Post datapoint
      security:
        - BackofficeAuthToken: []
      operationId: backofficePostDatapoint
      parameters:
        - name: body
          in: body
          schema:
            $ref: "#/definitions/datapointRequestBody"
      responses:
        '200':
          description: OK
          schema:
            $ref: "#/definitions/userResponse"
        '400':
          description: Validation errors
          schema:
            $ref: '#/definitions/validationError'
        '403':
          description: Authentication error
          schema:
            $ref: "#/definitions/error"
 
definitions:
  user:
    type: object
    properties:
      first_name:
        type: string
        example: 'John'
      last_name:
        type: string
        example: 'Doe'
      imei:
        type: string
        example: '100000000000001'
      password:
        type: string
        example: 'strongPassord'
      country_code:
        $ref: "#/definitions/countryCode"

  userLogin:
    type: object
    properties:
      imei:
        type: string
        example: '100000000000001'
      password:
        type: string
        example: 'strongPassord'     
  loginToken:
    type: object
    properties:
      token:
        type: string
        example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI1ZTgyMTY4YjlkYjBkYTEyYmRiOTQxMGQiLCJhY2Nlc3MiOiJhdXRoIiwiaWF0IjoxNTg1NTkzMzQ1fQ.RM7UvjXzeW40oAHeygdRn6qBDvWgFcdUGyNiKOKz0Ow'

  userRequestBody:
    type: object
    allOf:
      - $ref: "#/definitions/user"
    required:
      - imei
      - password
  userResponse:
    type: object
    allOf:
      - $ref: "#/definitions/user"
      - properties:
          id:
            type: string
            example: '5e130f33a45ff219588e8963'
          created_at:
            $ref: "#/definitions/date" 
  datapoint:
    type: object
    properties:
      time:
        $ref: "#/definitions/date" 
      lat:
        type: number
        example: 45.123123
      lon:
        type: number
        example: 25.123123
      imei:
        type: string
        example: 100000000000001
      symptom_scores:
        type: object
        properties:
          throat:
            type: number
            example: 0
          cough:
            type: number
            example: 2
          fever:
            type: number
            example: 1
          smell:
            type: number
            example: 1
          breathing:
            type: number
            example: 1
          pneumonia:
            type: number
            example: 1
          c19:
            type: number
            example: 1
          hospital:
            type: number
            example: 1
          score:
            type: number
            example: 1
          


  datapointRequestBody:
    type: object
    allOf:
      - $ref: "#/definitions/datapoint"
    required:
      - lat
      - lon
      - time
      - imei

  countryCode:
    type: string
    pattern: '^([a-zA-Z]{2})$'
    example: 'DE'

  date:
    type: string
    format: date-time
    example: '2020-01-01T00:00:00.123Z'

  error:
    type: object
    properties:
      status:
        type: number
      code:
        type: number

  validationMessage:
    type: array
    items:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
        path:
          type: array
          items:
            type: string

  validationError:
    type: object
    properties:
      code:
        type: string
      failedValidation:
        type: boolean
      message:
        type: string
      paramName:
        type: string
      path:
        type: array
        items:
          type: string
      results:
        type: object
        properties:
          errors:
            $ref: "#/definitions/validationMessage"
          warnings:
            $ref: "#/definitions/validationMessage"
    additionalProperties: false

